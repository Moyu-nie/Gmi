% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SBfusedlasso.R
\name{SBfusedlasso}
\alias{SBfusedlasso}
\title{Split Bregman method for Fused Lasso}
\usage{
SBfusedlasso(
  X,
  y,
  a_0,
  beta,
  lam,
  eta,
  rho1 = 1,
  rho2 = 1,
  penalty.type = "SCAD",
  epsilon1 = 4e-07,
  epsilon2 = 4e-07,
  maxiter1 = 100,
  maxiter2 = 100,
  pf
)
}
\arguments{
\item{X}{input matrix, of dimension nobs x nvars; each row is an observation.}

\item{y}{response variable, of dimension nobs x.}

\item{a_0}{Initial value for the intercept.}

\item{beta}{Initial value for the coefficient vector (length equal to nvars).}

\item{lam}{Overall penalty level (positive scalar). It will be split into two components: \code{lambda1} for
sparsity and \code{lambda2} for fusion.}

\item{eta}{A scalar in between 0 and 1 that controls the proportion of \code{lam} allocated to sparsity
(lasso-type) versus fusion penalty.}

\item{rho1}{Augmented Lagrangian parameter for the sparsity constraint. Default is 1.}

\item{rho2}{Augmented Lagrangian parameter for the fusion constraint. Default is 1.}

\item{penalty.type}{Choose from \code{LASSO}, \code{SCAD} and \code{MCP}. Default is 'SCAD'.}

\item{epsilon1}{Convergence tolerance for primal residuals in ADMM. Default is \code{4e-7}.}

\item{epsilon2}{Convergence tolerance for dual residuals in ADMM. Default is \code{4e-7}.}

\item{maxiter1}{Maximum number of IRLS (outer loop) iterations. Default is 100.}

\item{maxiter2}{Maximum number of ADMM (inner loop) iterations. Default is 100.}

\item{pf}{A numeric vector of penalty factors (length equal to number of variables). Variables with \code{pf = 0} will not be penalized.}
}
\value{
A list with the following elements:
\describe{
\item{beta}{Estimated coefficient vector.}
\item{a_0}{Estimated intercept.}
\item{iters}{Number of outer iterations until convergence.}
}
}
\description{
Split Bregman method for Fused Lasso
}
\examples{
set.seed(123)
n <- 50
p <- 10
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(2, 5), rep(0, 5))
eta <- X \%*\% beta_true
prob <- Sigmoid(eta)
y <- rbinom(n, 1, prob)
pf <- rep(1, p)

fit <- SBfusedlasso(X, y,
  a_0 = 0, beta = rep(0, p), lam = 1, eta = 0.5,
  penalty.type = "SCAD", pf = pf
)
print(fit$beta)

}
